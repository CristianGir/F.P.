# -*- coding: utf-8 -*-
"""Ordenamiento.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o4cOzUD0r5B0Ob0gwC3N8-8O_ZU6mAu-
"""

import random
#Creación de vector vacío.
vector=[]
#Llenado de vector con números aleatorios.
for i in range(10):
  vector.append(random.randint(1,20))
#Impresión de vector original.
print(vector)

#Ordenamiento de burbuja.
def burbuja (x):
  organizado=False
  while organizado==False:
    organizado=True
    for i in range(len(x)-1):
      if x[i]>x[i+1]:
        temp=x[i]
        x[i]=x[i+1]
        x[i+1]=temp
        organizado=False
  print(vector)
burbuja(vector)

#Ordenamiento por inserción.
def insercion(x):
    for i in range(1,len(x)):
        valor=x[i]
        j=i
        while (j>0 and x[j-1]>valor):
            x[j]=x[j-1]
            j=j-1
            x[j]=valor
    print(vector)
insercion(vector)

#Ordenamiento shell.
##Función de ordenamiento por inserción.
def insercion(x,valor,j):
    for i in range(1,len(x)):
        valor=x[i]
        j=i
        while (j>0 and x[j-1]>valor):
            x[j]=x[j-1]
            j=j-1
            x[j]=valor
##Función de ordenamiento shell.
def shell(x):
  sub=len(x)//2
  while sub>0:
    for i in range(sub):
      insercion(x,i,sub)
    sub=sub//2
  print(vector)
shell(vector)

#Ordenamiento QuickSort.
def quick(x):
  lenght=len(x)
  if lenght<=1:
    return x
  else:
    pivot=x.pop()
  left=[]
  right=[]
  for i in x:
    if i>pivot:
      right.append(i)
    else:
      left.append(i)
  return quick(left)+[pivot]+quick(right)
print(quick(vector))

#ordenamiento por selección.
def seleccion(x):
   for i in range(len(x)-1,0,-1):
       mayor=0
       for j in range(1,i+1):
           if x[j]>x[mayor]:
              mayor=j
       temp=x[i]
       x[i]=x[mayor]
       x[mayor]=temp
seleccion(vector)
print(vector)